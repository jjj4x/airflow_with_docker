arch: amd64
os: linux
dist: bionic
language: minimal

services:
  - docker

env:
  global:
    - AIRFLOW_VERSION=1.10.9
    - AIRFLOW_REGRESS_VERSION=1.10.5

branches:
  only:
  - master
  - dev

stages:
  - name: Build and Test
  - name: Build Production
  - name: Deploy Production
    if: branch = master

jobs:
  include:
    - stage: Build and Test
      name: 'Build Image and Test Build Arguments'
      script:
        - travis_wait 40 docker build -t jjjax/airflow-docker-light-test-build-args -f Dockerfile --build-arg AIRFLOW_VERSION=${AIRFLOW_REGRESS_VERSION} --build-arg AIRFLOW_HOME=/airflow --build-arg AIRFLOW__CORE__FERNET_KEY=123 --build-arg AIRFLOW_DEPS="" --build-arg PYTHON_DEPS=requirements.test.txt --build-arg LINUX_DEPS="bash zsh" --build-arg TIMEZONE=Europe/Moscow .
        - docker run --rm jjjax/airflow-docker-light-test-build-args sh -c 'pip install werkzeug==0.16.1 && airflow upgradedb'

    - stage: Build and Test
      name: 'Build Test Image'
      script:
        - travis_wait 40 docker-compose -f docker-compose.test.yml build
        - docker-compose -f docker-compose.test.yml run --rm airflow_tests
      after_script:
        - docker-compose down || true

    - stage: Build Production
      name: 'Build Production Image'
      workspaces:
        create:
          name: production-build
          paths:
            - production-build.tar
      script:
        - travis_wait 40 docker-compose -f docker-compose.sample.yml build
        - docker save jjjax/airflow-docker-light:latest > production-build.tar

    - stage: Deploy Production
      name: 'Deploy Production Image'
      workspaces:
        use: production-build
      script:
        - docker load < production-build.tar
        - docker tag jjjax/airflow-docker-light:latest jjjax/airflow-docker-light:${AIRFLOW_VERSION}
        - echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
        - docker push jjjax/airflow-docker-light:${AIRFLOW_VERSION}
      on:
        branch: master

notifications:
  email:
    if: branch = master
    on_success: never
    on_failure: always
